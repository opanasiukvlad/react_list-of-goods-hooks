{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isStarted","setIsStarted","isReversed","setIsReversed","NONE","sortType","setSortType","reversedGoods","goods","visibleGoods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","Button","type","onClick","ButtonGroup","variant","value","color","List","map","good","ListItem","ReactDOM","render","document","getElementById"],"mappings":"6KAoBKA,E,uFAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,cAAAA,E,wBAAAA,E,qBAAAA,M,KAkCE,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAASH,EAASQ,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAYMC,EA3CR,SACEC,EACAH,EACAH,GAGA,IAAMO,EAAY,YAAOD,GAezB,OAbAC,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQP,GACN,KAAKT,EAASiB,SACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKhB,EAASmB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAITd,EACKO,EAAaQ,UAGfR,EAkBeS,CACpBrB,EACAQ,EACAH,GAGF,OACE,sBAAKiB,UAAU,MAAf,WACInB,GACA,cAACoB,EAAA,EAAD,CACEC,KAAK,SACLC,QArBY,kBAAOrB,GAAa,IAmBlC,mBAQDD,GACC,qCACE,eAACuB,EAAA,EAAD,CACEC,QAAQ,WACR,aAAW,wBAFb,UAIE,cAACJ,EAAA,EAAD,CACEC,KAAK,SACLC,QAlCqB,kBAAOhB,EAAYV,EAASiB,WAmCjDW,QAAsB,iBAAbnB,EACL,YACA,WALN,iCASA,cAACe,EAAA,EAAD,CACEC,KAAK,SACLC,QA1Ca,kBAAOhB,EAAYV,EAASmB,SA2CzCS,QAAsB,eAAbnB,EACL,YACA,WALN,4BASA,cAACe,EAAA,EAAD,CACEC,KAAK,SACLC,QAlDU,kBAAOnB,GAAc,SAAAsB,GAAK,OAAKA,MAmDzCD,SAAwB,IAAftB,EACL,YACA,WALN,qBASA,cAACkB,EAAA,EAAD,CACEC,KAAK,SACLC,QAzDQ,WAClBnB,GAAc,GACdG,EAAYV,EAASQ,OAwDXsB,MAAM,QAHR,sBASF,cAACC,EAAA,EAAD,CAAMR,UAAU,QAAhB,SACGZ,EAAcqB,KAAI,SAAAC,GAAI,OACrB,cAACC,EAAA,EAAD,CACEX,UAAU,cADZ,SAIGU,GAFIA,eCjIrBE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5e8f7b40.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Button, ButtonGroup } from '@mui/material';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE = 'noSort',\n  ALPHABET = 'alphabetSort',\n  LENGTH = 'lengthSort',\n}\n\nfunction getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  // Not to mutate the original array\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return a.localeCompare(b);\n\n      case SortType.LENGTH:\n        return a.length - b.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleStart = () => (setIsStarted(true));\n  const handleSortAlphabetically = () => (setSortType(SortType.ALPHABET));\n  const handleSortLength = () => (setSortType(SortType.LENGTH));\n  const handleReverse = () => (setIsReversed(value => !value));\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const reversedGoods = getReorderedGoods(\n    goodsFromServer,\n    sortType,\n    isReversed,\n  );\n\n  return (\n    <div className=\"App\">\n      {!isStarted && (\n        <Button\n          type=\"button\"\n          onClick={handleStart}\n        >\n          Start\n        </Button>\n      )}\n\n      {isStarted && (\n        <>\n          <ButtonGroup\n            variant=\"outlined\"\n            aria-label=\"outlined button group\"\n          >\n            <Button\n              type=\"button\"\n              onClick={handleSortAlphabetically}\n              variant={sortType === 'alphabetSort'\n                ? 'contained'\n                : 'outlined'}\n            >\n              Sort alphabetically\n            </Button>\n            <Button\n              type=\"button\"\n              onClick={handleSortLength}\n              variant={sortType === 'lengthSort'\n                ? 'contained'\n                : 'outlined'}\n            >\n              Sort by length\n            </Button>\n            <Button\n              type=\"button\"\n              onClick={handleReverse}\n              variant={isReversed === true\n                ? 'contained'\n                : 'outlined'}\n            >\n              Reverse\n            </Button>\n            <Button\n              type=\"button\"\n              onClick={handleReset}\n              color=\"error\"\n            >\n              Reset\n            </Button>\n          </ButtonGroup>\n\n          <List className=\"Goods\">\n            {reversedGoods.map(good => (\n              <ListItem\n                className=\"Goods__item\"\n                key={good}\n              >\n                {good}\n              </ListItem>\n            ))}\n          </List>\n        </>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}